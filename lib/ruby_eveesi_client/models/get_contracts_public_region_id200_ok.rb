=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module RubyEveesiClient
  # 200 ok object
  class GetContractsPublicRegionId200Ok
    # Buyout price (for Auctions only)
    attr_accessor :buyout

    # Collateral price (for Couriers only)
    attr_accessor :collateral

    # contract_id integer
    attr_accessor :contract_id

    # Expiration date of the contract
    attr_accessor :date_expired

    # Ð¡reation date of the contract
    attr_accessor :date_issued

    # Number of days to perform the contract
    attr_accessor :days_to_complete

    # End location ID (for Couriers contract)
    attr_accessor :end_location_id

    # true if the contract was issued on behalf of the issuer's corporation
    attr_accessor :for_corporation

    # Character's corporation ID for the issuer
    attr_accessor :issuer_corporation_id

    # Character ID for the issuer
    attr_accessor :issuer_id

    # Price of contract (for ItemsExchange and Auctions)
    attr_accessor :price

    # Remuneration for contract (for Couriers only)
    attr_accessor :reward

    # Start location ID (for Couriers contract)
    attr_accessor :start_location_id

    # Title of the contract
    attr_accessor :title

    # Type of the contract
    attr_accessor :type

    # Volume of items in the contract
    attr_accessor :volume

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'buyout' => :'buyout',
        :'collateral' => :'collateral',
        :'contract_id' => :'contract_id',
        :'date_expired' => :'date_expired',
        :'date_issued' => :'date_issued',
        :'days_to_complete' => :'days_to_complete',
        :'end_location_id' => :'end_location_id',
        :'for_corporation' => :'for_corporation',
        :'issuer_corporation_id' => :'issuer_corporation_id',
        :'issuer_id' => :'issuer_id',
        :'price' => :'price',
        :'reward' => :'reward',
        :'start_location_id' => :'start_location_id',
        :'title' => :'title',
        :'type' => :'type',
        :'volume' => :'volume'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'buyout' => :'Float',
        :'collateral' => :'Float',
        :'contract_id' => :'Integer',
        :'date_expired' => :'Time',
        :'date_issued' => :'Time',
        :'days_to_complete' => :'Integer',
        :'end_location_id' => :'Integer',
        :'for_corporation' => :'Boolean',
        :'issuer_corporation_id' => :'Integer',
        :'issuer_id' => :'Integer',
        :'price' => :'Float',
        :'reward' => :'Float',
        :'start_location_id' => :'Integer',
        :'title' => :'String',
        :'type' => :'String',
        :'volume' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubyEveesiClient::GetContractsPublicRegionId200Ok` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubyEveesiClient::GetContractsPublicRegionId200Ok`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'buyout')
        self.buyout = attributes[:'buyout']
      end

      if attributes.key?(:'collateral')
        self.collateral = attributes[:'collateral']
      end

      if attributes.key?(:'contract_id')
        self.contract_id = attributes[:'contract_id']
      end

      if attributes.key?(:'date_expired')
        self.date_expired = attributes[:'date_expired']
      end

      if attributes.key?(:'date_issued')
        self.date_issued = attributes[:'date_issued']
      end

      if attributes.key?(:'days_to_complete')
        self.days_to_complete = attributes[:'days_to_complete']
      end

      if attributes.key?(:'end_location_id')
        self.end_location_id = attributes[:'end_location_id']
      end

      if attributes.key?(:'for_corporation')
        self.for_corporation = attributes[:'for_corporation']
      end

      if attributes.key?(:'issuer_corporation_id')
        self.issuer_corporation_id = attributes[:'issuer_corporation_id']
      end

      if attributes.key?(:'issuer_id')
        self.issuer_id = attributes[:'issuer_id']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'reward')
        self.reward = attributes[:'reward']
      end

      if attributes.key?(:'start_location_id')
        self.start_location_id = attributes[:'start_location_id']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @contract_id.nil?
        invalid_properties.push('invalid value for "contract_id", contract_id cannot be nil.')
      end

      if @date_expired.nil?
        invalid_properties.push('invalid value for "date_expired", date_expired cannot be nil.')
      end

      if @date_issued.nil?
        invalid_properties.push('invalid value for "date_issued", date_issued cannot be nil.')
      end

      if @issuer_corporation_id.nil?
        invalid_properties.push('invalid value for "issuer_corporation_id", issuer_corporation_id cannot be nil.')
      end

      if @issuer_id.nil?
        invalid_properties.push('invalid value for "issuer_id", issuer_id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @contract_id.nil?
      return false if @date_expired.nil?
      return false if @date_issued.nil?
      return false if @issuer_corporation_id.nil?
      return false if @issuer_id.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["unknown", "item_exchange", "auction", "courier", "loan"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["unknown", "item_exchange", "auction", "courier", "loan"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          buyout == o.buyout &&
          collateral == o.collateral &&
          contract_id == o.contract_id &&
          date_expired == o.date_expired &&
          date_issued == o.date_issued &&
          days_to_complete == o.days_to_complete &&
          end_location_id == o.end_location_id &&
          for_corporation == o.for_corporation &&
          issuer_corporation_id == o.issuer_corporation_id &&
          issuer_id == o.issuer_id &&
          price == o.price &&
          reward == o.reward &&
          start_location_id == o.start_location_id &&
          title == o.title &&
          type == o.type &&
          volume == o.volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [buyout, collateral, contract_id, date_expired, date_issued, days_to_complete, end_location_id, for_corporation, issuer_corporation_id, issuer_id, price, reward, start_location_id, title, type, volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubyEveesiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
