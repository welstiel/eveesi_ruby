=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module RubyEveesiClient
  # 200 ok object
  class GetUniverseSystemsSystemIdOk
    # The constellation this solar system is in
    attr_accessor :constellation_id

    # name string
    attr_accessor :name

    # planets array
    attr_accessor :planets

    attr_accessor :position

    # security_class string
    attr_accessor :security_class

    # security_status number
    attr_accessor :security_status

    # star_id integer
    attr_accessor :star_id

    # stargates array
    attr_accessor :stargates

    # stations array
    attr_accessor :stations

    # system_id integer
    attr_accessor :system_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'constellation_id' => :'constellation_id',
        :'name' => :'name',
        :'planets' => :'planets',
        :'position' => :'position',
        :'security_class' => :'security_class',
        :'security_status' => :'security_status',
        :'star_id' => :'star_id',
        :'stargates' => :'stargates',
        :'stations' => :'stations',
        :'system_id' => :'system_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'constellation_id' => :'Integer',
        :'name' => :'String',
        :'planets' => :'Array<GetUniverseSystemsSystemIdPlanet>',
        :'position' => :'GetUniverseSystemsSystemIdPosition',
        :'security_class' => :'String',
        :'security_status' => :'Float',
        :'star_id' => :'Integer',
        :'stargates' => :'Array<Integer>',
        :'stations' => :'Array<Integer>',
        :'system_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubyEveesiClient::GetUniverseSystemsSystemIdOk` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubyEveesiClient::GetUniverseSystemsSystemIdOk`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'constellation_id')
        self.constellation_id = attributes[:'constellation_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'planets')
        if (value = attributes[:'planets']).is_a?(Array)
          self.planets = value
        end
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'security_class')
        self.security_class = attributes[:'security_class']
      end

      if attributes.key?(:'security_status')
        self.security_status = attributes[:'security_status']
      end

      if attributes.key?(:'star_id')
        self.star_id = attributes[:'star_id']
      end

      if attributes.key?(:'stargates')
        if (value = attributes[:'stargates']).is_a?(Array)
          self.stargates = value
        end
      end

      if attributes.key?(:'stations')
        if (value = attributes[:'stations']).is_a?(Array)
          self.stations = value
        end
      end

      if attributes.key?(:'system_id')
        self.system_id = attributes[:'system_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @constellation_id.nil?
        invalid_properties.push('invalid value for "constellation_id", constellation_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if !@planets.nil? && @planets.length > 1000
        invalid_properties.push('invalid value for "planets", number of items must be less than or equal to 1000.')
      end

      if @position.nil?
        invalid_properties.push('invalid value for "position", position cannot be nil.')
      end

      if @security_status.nil?
        invalid_properties.push('invalid value for "security_status", security_status cannot be nil.')
      end

      if !@stargates.nil? && @stargates.length > 25
        invalid_properties.push('invalid value for "stargates", number of items must be less than or equal to 25.')
      end

      if !@stations.nil? && @stations.length > 25
        invalid_properties.push('invalid value for "stations", number of items must be less than or equal to 25.')
      end

      if @system_id.nil?
        invalid_properties.push('invalid value for "system_id", system_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @constellation_id.nil?
      return false if @name.nil?
      return false if !@planets.nil? && @planets.length > 1000
      return false if @position.nil?
      return false if @security_status.nil?
      return false if !@stargates.nil? && @stargates.length > 25
      return false if !@stations.nil? && @stations.length > 25
      return false if @system_id.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] planets Value to be assigned
    def planets=(planets)
      if !planets.nil? && planets.length > 1000
        fail ArgumentError, 'invalid value for "planets", number of items must be less than or equal to 1000.'
      end

      @planets = planets
    end

    # Custom attribute writer method with validation
    # @param [Object] stargates Value to be assigned
    def stargates=(stargates)
      if !stargates.nil? && stargates.length > 25
        fail ArgumentError, 'invalid value for "stargates", number of items must be less than or equal to 25.'
      end

      @stargates = stargates
    end

    # Custom attribute writer method with validation
    # @param [Object] stations Value to be assigned
    def stations=(stations)
      if !stations.nil? && stations.length > 25
        fail ArgumentError, 'invalid value for "stations", number of items must be less than or equal to 25.'
      end

      @stations = stations
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          constellation_id == o.constellation_id &&
          name == o.name &&
          planets == o.planets &&
          position == o.position &&
          security_class == o.security_class &&
          security_status == o.security_status &&
          star_id == o.star_id &&
          stargates == o.stargates &&
          stations == o.stations &&
          system_id == o.system_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [constellation_id, name, planets, position, security_class, security_status, star_id, stargates, stations, system_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubyEveesiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
