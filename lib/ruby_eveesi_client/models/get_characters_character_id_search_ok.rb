=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module RubyEveesiClient
  # 200 ok object
  class GetCharactersCharacterIdSearchOk
    # agent array
    attr_accessor :agent

    # alliance array
    attr_accessor :alliance

    # character array
    attr_accessor :character

    # constellation array
    attr_accessor :constellation

    # corporation array
    attr_accessor :corporation

    # faction array
    attr_accessor :faction

    # inventory_type array
    attr_accessor :inventory_type

    # region array
    attr_accessor :region

    # solar_system array
    attr_accessor :solar_system

    # station array
    attr_accessor :station

    # structure array
    attr_accessor :structure

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'agent' => :'agent',
        :'alliance' => :'alliance',
        :'character' => :'character',
        :'constellation' => :'constellation',
        :'corporation' => :'corporation',
        :'faction' => :'faction',
        :'inventory_type' => :'inventory_type',
        :'region' => :'region',
        :'solar_system' => :'solar_system',
        :'station' => :'station',
        :'structure' => :'structure'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'agent' => :'Array<Integer>',
        :'alliance' => :'Array<Integer>',
        :'character' => :'Array<Integer>',
        :'constellation' => :'Array<Integer>',
        :'corporation' => :'Array<Integer>',
        :'faction' => :'Array<Integer>',
        :'inventory_type' => :'Array<Integer>',
        :'region' => :'Array<Integer>',
        :'solar_system' => :'Array<Integer>',
        :'station' => :'Array<Integer>',
        :'structure' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubyEveesiClient::GetCharactersCharacterIdSearchOk` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubyEveesiClient::GetCharactersCharacterIdSearchOk`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'agent')
        if (value = attributes[:'agent']).is_a?(Array)
          self.agent = value
        end
      end

      if attributes.key?(:'alliance')
        if (value = attributes[:'alliance']).is_a?(Array)
          self.alliance = value
        end
      end

      if attributes.key?(:'character')
        if (value = attributes[:'character']).is_a?(Array)
          self.character = value
        end
      end

      if attributes.key?(:'constellation')
        if (value = attributes[:'constellation']).is_a?(Array)
          self.constellation = value
        end
      end

      if attributes.key?(:'corporation')
        if (value = attributes[:'corporation']).is_a?(Array)
          self.corporation = value
        end
      end

      if attributes.key?(:'faction')
        if (value = attributes[:'faction']).is_a?(Array)
          self.faction = value
        end
      end

      if attributes.key?(:'inventory_type')
        if (value = attributes[:'inventory_type']).is_a?(Array)
          self.inventory_type = value
        end
      end

      if attributes.key?(:'region')
        if (value = attributes[:'region']).is_a?(Array)
          self.region = value
        end
      end

      if attributes.key?(:'solar_system')
        if (value = attributes[:'solar_system']).is_a?(Array)
          self.solar_system = value
        end
      end

      if attributes.key?(:'station')
        if (value = attributes[:'station']).is_a?(Array)
          self.station = value
        end
      end

      if attributes.key?(:'structure')
        if (value = attributes[:'structure']).is_a?(Array)
          self.structure = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@agent.nil? && @agent.length > 500
        invalid_properties.push('invalid value for "agent", number of items must be less than or equal to 500.')
      end

      if !@alliance.nil? && @alliance.length > 500
        invalid_properties.push('invalid value for "alliance", number of items must be less than or equal to 500.')
      end

      if !@character.nil? && @character.length > 500
        invalid_properties.push('invalid value for "character", number of items must be less than or equal to 500.')
      end

      if !@constellation.nil? && @constellation.length > 500
        invalid_properties.push('invalid value for "constellation", number of items must be less than or equal to 500.')
      end

      if !@corporation.nil? && @corporation.length > 500
        invalid_properties.push('invalid value for "corporation", number of items must be less than or equal to 500.')
      end

      if !@faction.nil? && @faction.length > 500
        invalid_properties.push('invalid value for "faction", number of items must be less than or equal to 500.')
      end

      if !@inventory_type.nil? && @inventory_type.length > 500
        invalid_properties.push('invalid value for "inventory_type", number of items must be less than or equal to 500.')
      end

      if !@region.nil? && @region.length > 500
        invalid_properties.push('invalid value for "region", number of items must be less than or equal to 500.')
      end

      if !@solar_system.nil? && @solar_system.length > 500
        invalid_properties.push('invalid value for "solar_system", number of items must be less than or equal to 500.')
      end

      if !@station.nil? && @station.length > 500
        invalid_properties.push('invalid value for "station", number of items must be less than or equal to 500.')
      end

      if !@structure.nil? && @structure.length > 500
        invalid_properties.push('invalid value for "structure", number of items must be less than or equal to 500.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@agent.nil? && @agent.length > 500
      return false if !@alliance.nil? && @alliance.length > 500
      return false if !@character.nil? && @character.length > 500
      return false if !@constellation.nil? && @constellation.length > 500
      return false if !@corporation.nil? && @corporation.length > 500
      return false if !@faction.nil? && @faction.length > 500
      return false if !@inventory_type.nil? && @inventory_type.length > 500
      return false if !@region.nil? && @region.length > 500
      return false if !@solar_system.nil? && @solar_system.length > 500
      return false if !@station.nil? && @station.length > 500
      return false if !@structure.nil? && @structure.length > 500
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] agent Value to be assigned
    def agent=(agent)
      if !agent.nil? && agent.length > 500
        fail ArgumentError, 'invalid value for "agent", number of items must be less than or equal to 500.'
      end

      @agent = agent
    end

    # Custom attribute writer method with validation
    # @param [Object] alliance Value to be assigned
    def alliance=(alliance)
      if !alliance.nil? && alliance.length > 500
        fail ArgumentError, 'invalid value for "alliance", number of items must be less than or equal to 500.'
      end

      @alliance = alliance
    end

    # Custom attribute writer method with validation
    # @param [Object] character Value to be assigned
    def character=(character)
      if !character.nil? && character.length > 500
        fail ArgumentError, 'invalid value for "character", number of items must be less than or equal to 500.'
      end

      @character = character
    end

    # Custom attribute writer method with validation
    # @param [Object] constellation Value to be assigned
    def constellation=(constellation)
      if !constellation.nil? && constellation.length > 500
        fail ArgumentError, 'invalid value for "constellation", number of items must be less than or equal to 500.'
      end

      @constellation = constellation
    end

    # Custom attribute writer method with validation
    # @param [Object] corporation Value to be assigned
    def corporation=(corporation)
      if !corporation.nil? && corporation.length > 500
        fail ArgumentError, 'invalid value for "corporation", number of items must be less than or equal to 500.'
      end

      @corporation = corporation
    end

    # Custom attribute writer method with validation
    # @param [Object] faction Value to be assigned
    def faction=(faction)
      if !faction.nil? && faction.length > 500
        fail ArgumentError, 'invalid value for "faction", number of items must be less than or equal to 500.'
      end

      @faction = faction
    end

    # Custom attribute writer method with validation
    # @param [Object] inventory_type Value to be assigned
    def inventory_type=(inventory_type)
      if !inventory_type.nil? && inventory_type.length > 500
        fail ArgumentError, 'invalid value for "inventory_type", number of items must be less than or equal to 500.'
      end

      @inventory_type = inventory_type
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if !region.nil? && region.length > 500
        fail ArgumentError, 'invalid value for "region", number of items must be less than or equal to 500.'
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] solar_system Value to be assigned
    def solar_system=(solar_system)
      if !solar_system.nil? && solar_system.length > 500
        fail ArgumentError, 'invalid value for "solar_system", number of items must be less than or equal to 500.'
      end

      @solar_system = solar_system
    end

    # Custom attribute writer method with validation
    # @param [Object] station Value to be assigned
    def station=(station)
      if !station.nil? && station.length > 500
        fail ArgumentError, 'invalid value for "station", number of items must be less than or equal to 500.'
      end

      @station = station
    end

    # Custom attribute writer method with validation
    # @param [Object] structure Value to be assigned
    def structure=(structure)
      if !structure.nil? && structure.length > 500
        fail ArgumentError, 'invalid value for "structure", number of items must be less than or equal to 500.'
      end

      @structure = structure
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          agent == o.agent &&
          alliance == o.alliance &&
          character == o.character &&
          constellation == o.constellation &&
          corporation == o.corporation &&
          faction == o.faction &&
          inventory_type == o.inventory_type &&
          region == o.region &&
          solar_system == o.solar_system &&
          station == o.station &&
          structure == o.structure
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [agent, alliance, character, constellation, corporation, faction, inventory_type, region, solar_system, station, structure].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubyEveesiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
