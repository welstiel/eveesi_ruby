=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module RubyEveesiClient
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete contacts
    # Bulk delete contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 
    # @param character_id [Integer] An EVE character ID
    # @param contact_ids [Array<Integer>] A list of contacts to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def delete_characters_character_id_contacts(character_id, contact_ids, opts = {})
      delete_characters_character_id_contacts_with_http_info(character_id, contact_ids, opts)
      nil
    end

    # Delete contacts
    # Bulk delete contacts  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60; 
    # @param character_id [Integer] An EVE character ID
    # @param contact_ids [Array<Integer>] A list of contacts to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_characters_character_id_contacts_with_http_info(character_id, contact_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.delete_characters_character_id_contacts ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContactsApi.delete_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContactsApi.delete_characters_character_id_contacts, must be greater than or equal to 1.'
      end

      # verify the required parameter 'contact_ids' is set
      if @api_client.config.client_side_validation && contact_ids.nil?
        fail ArgumentError, "Missing the required parameter 'contact_ids' when calling ContactsApi.delete_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && contact_ids.length > 20
        fail ArgumentError, 'invalid value for "contact_ids" when calling ContactsApi.delete_characters_character_id_contacts, number of items must be less than or equal to 20.'
      end

      if @api_client.config.client_side_validation && contact_ids.length < 1
        fail ArgumentError, 'invalid value for "contact_ids" when calling ContactsApi.delete_characters_character_id_contacts, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/characters/{character_id}/contacts/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'contact_ids'] = @api_client.build_collection_param(contact_ids, :csv)
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.delete_characters_character_id_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#delete_characters_character_id_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get alliance contacts
    # Return contacts of an alliance  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/`  Alternate route: `/v2/alliances/{alliance_id}/contacts/`  --- This route is cached for up to 300 seconds
    # @param alliance_id [Integer] An EVE alliance ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetAlliancesAllianceIdContacts200Ok>]
    def get_alliances_alliance_id_contacts(alliance_id, opts = {})
      data, _status_code, _headers = get_alliances_alliance_id_contacts_with_http_info(alliance_id, opts)
      data
    end

    # Get alliance contacts
    # Return contacts of an alliance  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/contacts/&#x60;  Alternate route: &#x60;/v2/alliances/{alliance_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
    # @param alliance_id [Integer] An EVE alliance ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetAlliancesAllianceIdContacts200Ok>, Integer, Hash)>] Array<GetAlliancesAllianceIdContacts200Ok> data, response status code and response headers
    def get_alliances_alliance_id_contacts_with_http_info(alliance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_alliances_alliance_id_contacts ...'
      end
      # verify the required parameter 'alliance_id' is set
      if @api_client.config.client_side_validation && alliance_id.nil?
        fail ArgumentError, "Missing the required parameter 'alliance_id' when calling ContactsApi.get_alliances_alliance_id_contacts"
      end
      if @api_client.config.client_side_validation && alliance_id < 1
        fail ArgumentError, 'invalid value for "alliance_id" when calling ContactsApi.get_alliances_alliance_id_contacts, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContactsApi.get_alliances_alliance_id_contacts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/alliances/{alliance_id}/contacts/'.sub('{' + 'alliance_id' + '}', CGI.escape(alliance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetAlliancesAllianceIdContacts200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.get_alliances_alliance_id_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_alliances_alliance_id_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get alliance contact labels
    # Return custom labels for an alliance's contacts  --- Alternate route: `/dev/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/legacy/alliances/{alliance_id}/contacts/labels/`  Alternate route: `/v1/alliances/{alliance_id}/contacts/labels/`  --- This route is cached for up to 300 seconds
    # @param alliance_id [Integer] An EVE alliance ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetAlliancesAllianceIdContactsLabels200Ok>]
    def get_alliances_alliance_id_contacts_labels(alliance_id, opts = {})
      data, _status_code, _headers = get_alliances_alliance_id_contacts_labels_with_http_info(alliance_id, opts)
      data
    end

    # Get alliance contact labels
    # Return custom labels for an alliance&#39;s contacts  --- Alternate route: &#x60;/dev/alliances/{alliance_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/alliances/{alliance_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
    # @param alliance_id [Integer] An EVE alliance ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetAlliancesAllianceIdContactsLabels200Ok>, Integer, Hash)>] Array<GetAlliancesAllianceIdContactsLabels200Ok> data, response status code and response headers
    def get_alliances_alliance_id_contacts_labels_with_http_info(alliance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_alliances_alliance_id_contacts_labels ...'
      end
      # verify the required parameter 'alliance_id' is set
      if @api_client.config.client_side_validation && alliance_id.nil?
        fail ArgumentError, "Missing the required parameter 'alliance_id' when calling ContactsApi.get_alliances_alliance_id_contacts_labels"
      end
      if @api_client.config.client_side_validation && alliance_id < 1
        fail ArgumentError, 'invalid value for "alliance_id" when calling ContactsApi.get_alliances_alliance_id_contacts_labels, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/alliances/{alliance_id}/contacts/labels/'.sub('{' + 'alliance_id' + '}', CGI.escape(alliance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetAlliancesAllianceIdContactsLabels200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.get_alliances_alliance_id_contacts_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_alliances_alliance_id_contacts_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contacts
    # Return contacts of a character  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/`  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCharactersCharacterIdContacts200Ok>]
    def get_characters_character_id_contacts(character_id, opts = {})
      data, _status_code, _headers = get_characters_character_id_contacts_with_http_info(character_id, opts)
      data
    end

    # Get contacts
    # Return contacts of a character  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCharactersCharacterIdContacts200Ok>, Integer, Hash)>] Array<GetCharactersCharacterIdContacts200Ok> data, response status code and response headers
    def get_characters_character_id_contacts_with_http_info(character_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_characters_character_id_contacts ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContactsApi.get_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContactsApi.get_characters_character_id_contacts, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContactsApi.get_characters_character_id_contacts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/characters/{character_id}/contacts/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCharactersCharacterIdContacts200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.get_characters_character_id_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_characters_character_id_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contact labels
    # Return custom labels for a character's contacts  --- Alternate route: `/dev/characters/{character_id}/contacts/labels/`  Alternate route: `/legacy/characters/{character_id}/contacts/labels/`  Alternate route: `/v1/characters/{character_id}/contacts/labels/`  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCharactersCharacterIdContactsLabels200Ok>]
    def get_characters_character_id_contacts_labels(character_id, opts = {})
      data, _status_code, _headers = get_characters_character_id_contacts_labels_with_http_info(character_id, opts)
      data
    end

    # Get contact labels
    # Return custom labels for a character&#39;s contacts  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCharactersCharacterIdContactsLabels200Ok>, Integer, Hash)>] Array<GetCharactersCharacterIdContactsLabels200Ok> data, response status code and response headers
    def get_characters_character_id_contacts_labels_with_http_info(character_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_characters_character_id_contacts_labels ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContactsApi.get_characters_character_id_contacts_labels"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContactsApi.get_characters_character_id_contacts_labels, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/characters/{character_id}/contacts/labels/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCharactersCharacterIdContactsLabels200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.get_characters_character_id_contacts_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_characters_character_id_contacts_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get corporation contacts
    # Return contacts of a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/`  Alternate route: `/v2/corporations/{corporation_id}/contacts/`  --- This route is cached for up to 300 seconds
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCorporationsCorporationIdContacts200Ok>]
    def get_corporations_corporation_id_contacts(corporation_id, opts = {})
      data, _status_code, _headers = get_corporations_corporation_id_contacts_with_http_info(corporation_id, opts)
      data
    end

    # Get corporation contacts
    # Return contacts of a corporation  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contacts/&#x60;  Alternate route: &#x60;/v2/corporations/{corporation_id}/contacts/&#x60;  --- This route is cached for up to 300 seconds
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCorporationsCorporationIdContacts200Ok>, Integer, Hash)>] Array<GetCorporationsCorporationIdContacts200Ok> data, response status code and response headers
    def get_corporations_corporation_id_contacts_with_http_info(corporation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_corporations_corporation_id_contacts ...'
      end
      # verify the required parameter 'corporation_id' is set
      if @api_client.config.client_side_validation && corporation_id.nil?
        fail ArgumentError, "Missing the required parameter 'corporation_id' when calling ContactsApi.get_corporations_corporation_id_contacts"
      end
      if @api_client.config.client_side_validation && corporation_id < 1
        fail ArgumentError, 'invalid value for "corporation_id" when calling ContactsApi.get_corporations_corporation_id_contacts, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContactsApi.get_corporations_corporation_id_contacts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/corporations/{corporation_id}/contacts/'.sub('{' + 'corporation_id' + '}', CGI.escape(corporation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCorporationsCorporationIdContacts200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.get_corporations_corporation_id_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_corporations_corporation_id_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get corporation contact labels
    # Return custom labels for a corporation's contacts  --- Alternate route: `/dev/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/legacy/corporations/{corporation_id}/contacts/labels/`  Alternate route: `/v1/corporations/{corporation_id}/contacts/labels/`  --- This route is cached for up to 300 seconds
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCorporationsCorporationIdContactsLabels200Ok>]
    def get_corporations_corporation_id_contacts_labels(corporation_id, opts = {})
      data, _status_code, _headers = get_corporations_corporation_id_contacts_labels_with_http_info(corporation_id, opts)
      data
    end

    # Get corporation contact labels
    # Return custom labels for a corporation&#39;s contacts  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contacts/labels/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contacts/labels/&#x60;  --- This route is cached for up to 300 seconds
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCorporationsCorporationIdContactsLabels200Ok>, Integer, Hash)>] Array<GetCorporationsCorporationIdContactsLabels200Ok> data, response status code and response headers
    def get_corporations_corporation_id_contacts_labels_with_http_info(corporation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.get_corporations_corporation_id_contacts_labels ...'
      end
      # verify the required parameter 'corporation_id' is set
      if @api_client.config.client_side_validation && corporation_id.nil?
        fail ArgumentError, "Missing the required parameter 'corporation_id' when calling ContactsApi.get_corporations_corporation_id_contacts_labels"
      end
      if @api_client.config.client_side_validation && corporation_id < 1
        fail ArgumentError, 'invalid value for "corporation_id" when calling ContactsApi.get_corporations_corporation_id_contacts_labels, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/corporations/{corporation_id}/contacts/labels/'.sub('{' + 'corporation_id' + '}', CGI.escape(corporation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCorporationsCorporationIdContactsLabels200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.get_corporations_corporation_id_contacts_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_corporations_corporation_id_contacts_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add contacts
    # Bulk add contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 
    # @param character_id [Integer] An EVE character ID
    # @param standing [Float] Standing for the contact
    # @param contact_ids [Array<Integer>] A list of contacts
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [Array<Integer>] :label_ids Add custom labels to the new contact
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [Boolean] :watched Whether the contact should be watched, note this is only effective on characters (default to false)
    # @return [Array<Integer>]
    def post_characters_character_id_contacts(character_id, standing, contact_ids, opts = {})
      data, _status_code, _headers = post_characters_character_id_contacts_with_http_info(character_id, standing, contact_ids, opts)
      data
    end

    # Add contacts
    # Bulk add contacts with same settings  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60; 
    # @param character_id [Integer] An EVE character ID
    # @param standing [Float] Standing for the contact
    # @param contact_ids [Array<Integer>] A list of contacts
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [Array<Integer>] :label_ids Add custom labels to the new contact
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [Boolean] :watched Whether the contact should be watched, note this is only effective on characters (default to false)
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def post_characters_character_id_contacts_with_http_info(character_id, standing, contact_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.post_characters_character_id_contacts ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContactsApi.post_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContactsApi.post_characters_character_id_contacts, must be greater than or equal to 1.'
      end

      # verify the required parameter 'standing' is set
      if @api_client.config.client_side_validation && standing.nil?
        fail ArgumentError, "Missing the required parameter 'standing' when calling ContactsApi.post_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && standing > 10
        fail ArgumentError, 'invalid value for "standing" when calling ContactsApi.post_characters_character_id_contacts, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && standing < -10
        fail ArgumentError, 'invalid value for "standing" when calling ContactsApi.post_characters_character_id_contacts, must be greater than or equal to -10.'
      end

      # verify the required parameter 'contact_ids' is set
      if @api_client.config.client_side_validation && contact_ids.nil?
        fail ArgumentError, "Missing the required parameter 'contact_ids' when calling ContactsApi.post_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && contact_ids.length > 100
        fail ArgumentError, 'invalid value for "contact_ids" when calling ContactsApi.post_characters_character_id_contacts, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && contact_ids.length < 1
        fail ArgumentError, 'invalid value for "contact_ids" when calling ContactsApi.post_characters_character_id_contacts, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'label_ids'].nil? && opts[:'label_ids'].length > 63
        fail ArgumentError, 'invalid value for "opts[:"label_ids"]" when calling ContactsApi.post_characters_character_id_contacts, number of items must be less than or equal to 63.'
      end

      # resource path
      local_var_path = '/characters/{character_id}/contacts/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'standing'] = standing
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'label_ids'] = @api_client.build_collection_param(opts[:'label_ids'], :csv) if !opts[:'label_ids'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'watched'] = opts[:'watched'] if !opts[:'watched'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(contact_ids)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.post_characters_character_id_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#post_characters_character_id_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit contacts
    # Bulk edit contacts with same settings  --- Alternate route: `/dev/characters/{character_id}/contacts/`  Alternate route: `/v2/characters/{character_id}/contacts/` 
    # @param character_id [Integer] An EVE character ID
    # @param standing [Float] Standing for the contact
    # @param contact_ids [Array<Integer>] A list of contacts
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [Array<Integer>] :label_ids Add custom labels to the contact
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [Boolean] :watched Whether the contact should be watched, note this is only effective on characters (default to false)
    # @return [nil]
    def put_characters_character_id_contacts(character_id, standing, contact_ids, opts = {})
      put_characters_character_id_contacts_with_http_info(character_id, standing, contact_ids, opts)
      nil
    end

    # Edit contacts
    # Bulk edit contacts with same settings  --- Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/v2/characters/{character_id}/contacts/&#x60; 
    # @param character_id [Integer] An EVE character ID
    # @param standing [Float] Standing for the contact
    # @param contact_ids [Array<Integer>] A list of contacts
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [Array<Integer>] :label_ids Add custom labels to the contact
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [Boolean] :watched Whether the contact should be watched, note this is only effective on characters (default to false)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_characters_character_id_contacts_with_http_info(character_id, standing, contact_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContactsApi.put_characters_character_id_contacts ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContactsApi.put_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContactsApi.put_characters_character_id_contacts, must be greater than or equal to 1.'
      end

      # verify the required parameter 'standing' is set
      if @api_client.config.client_side_validation && standing.nil?
        fail ArgumentError, "Missing the required parameter 'standing' when calling ContactsApi.put_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && standing > 10
        fail ArgumentError, 'invalid value for "standing" when calling ContactsApi.put_characters_character_id_contacts, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && standing < -10
        fail ArgumentError, 'invalid value for "standing" when calling ContactsApi.put_characters_character_id_contacts, must be greater than or equal to -10.'
      end

      # verify the required parameter 'contact_ids' is set
      if @api_client.config.client_side_validation && contact_ids.nil?
        fail ArgumentError, "Missing the required parameter 'contact_ids' when calling ContactsApi.put_characters_character_id_contacts"
      end
      if @api_client.config.client_side_validation && contact_ids.length > 100
        fail ArgumentError, 'invalid value for "contact_ids" when calling ContactsApi.put_characters_character_id_contacts, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && contact_ids.length < 1
        fail ArgumentError, 'invalid value for "contact_ids" when calling ContactsApi.put_characters_character_id_contacts, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'label_ids'].nil? && opts[:'label_ids'].length > 63
        fail ArgumentError, 'invalid value for "opts[:"label_ids"]" when calling ContactsApi.put_characters_character_id_contacts, number of items must be less than or equal to 63.'
      end

      # resource path
      local_var_path = '/characters/{character_id}/contacts/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'standing'] = standing
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'label_ids'] = @api_client.build_collection_param(opts[:'label_ids'], :csv) if !opts[:'label_ids'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'watched'] = opts[:'watched'] if !opts[:'watched'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(contact_ids)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContactsApi.put_characters_character_id_contacts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#put_characters_character_id_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
