=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module RubyEveesiClient
  class RoutesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get route
    # Get the systems between origin and destination  --- Alternate route: `/dev/route/{origin}/{destination}/`  Alternate route: `/legacy/route/{origin}/{destination}/`  Alternate route: `/v1/route/{origin}/{destination}/`  --- This route is cached for up to 86400 seconds
    # @param destination [Integer] destination solar system ID
    # @param origin [Integer] origin solar system ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :avoid avoid solar system ID(s)
    # @option opts [Array<Array<Integer>>] :connections connected solar system pairs
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :flag route security preference (default to 'shortest')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @return [Array<Integer>]
    def get_route_origin_destination(destination, origin, opts = {})
      data, _status_code, _headers = get_route_origin_destination_with_http_info(destination, origin, opts)
      data
    end

    # Get route
    # Get the systems between origin and destination  --- Alternate route: &#x60;/dev/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/legacy/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/v1/route/{origin}/{destination}/&#x60;  --- This route is cached for up to 86400 seconds
    # @param destination [Integer] destination solar system ID
    # @param origin [Integer] origin solar system ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :avoid avoid solar system ID(s)
    # @option opts [Array<Array<Integer>>] :connections connected solar system pairs
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :flag route security preference (default to 'shortest')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def get_route_origin_destination_with_http_info(destination, origin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RoutesApi.get_route_origin_destination ...'
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling RoutesApi.get_route_origin_destination"
      end
      # verify the required parameter 'origin' is set
      if @api_client.config.client_side_validation && origin.nil?
        fail ArgumentError, "Missing the required parameter 'origin' when calling RoutesApi.get_route_origin_destination"
      end
      if @api_client.config.client_side_validation && !opts[:'avoid'].nil? && opts[:'avoid'].length > 100
        fail ArgumentError, 'invalid value for "opts[:"avoid"]" when calling RoutesApi.get_route_origin_destination, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'connections'].nil? && opts[:'connections'].length > 100
        fail ArgumentError, 'invalid value for "opts[:"connections"]" when calling RoutesApi.get_route_origin_destination, number of items must be less than or equal to 100.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      allowable_values = ["shortest", "secure", "insecure"]
      if @api_client.config.client_side_validation && opts[:'flag'] && !allowable_values.include?(opts[:'flag'])
        fail ArgumentError, "invalid value for \"flag\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/route/{origin}/{destination}/'.sub('{' + 'destination' + '}', CGI.escape(destination.to_s)).sub('{' + 'origin' + '}', CGI.escape(origin.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'avoid'] = @api_client.build_collection_param(opts[:'avoid'], :csv) if !opts[:'avoid'].nil?
      query_params[:'connections'] = @api_client.build_collection_param(opts[:'connections'], :csv) if !opts[:'connections'].nil?
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'flag'] = opts[:'flag'] if !opts[:'flag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"RoutesApi.get_route_origin_destination",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutesApi#get_route_origin_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
