=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module RubyEveesiClient
  class FleetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Kick fleet member
    # Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param member_id [Integer] The character ID of a member in this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def delete_fleets_fleet_id_members_member_id(fleet_id, member_id, opts = {})
      delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, opts)
      nil
    end

    # Kick fleet member
    # Kick a fleet member  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param member_id [Integer] The character ID of a member in this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.delete_fleets_fleet_id_members_member_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.delete_fleets_fleet_id_members_member_id"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling FleetsApi.delete_fleets_fleet_id_members_member_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/members/{member_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.delete_fleets_fleet_id_members_member_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#delete_fleets_fleet_id_members_member_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete fleet squad
    # Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param squad_id [Integer] The squad to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def delete_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, opts = {})
      delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, opts)
      nil
    end

    # Delete fleet squad
    # Delete a fleet squad, only empty squads can be deleted  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param squad_id [Integer] The squad to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.delete_fleets_fleet_id_squads_squad_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.delete_fleets_fleet_id_squads_squad_id"
      end
      # verify the required parameter 'squad_id' is set
      if @api_client.config.client_side_validation && squad_id.nil?
        fail ArgumentError, "Missing the required parameter 'squad_id' when calling FleetsApi.delete_fleets_fleet_id_squads_squad_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/squads/{squad_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'squad_id' + '}', CGI.escape(squad_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.delete_fleets_fleet_id_squads_squad_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#delete_fleets_fleet_id_squads_squad_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete fleet wing
    # Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param wing_id [Integer] The wing to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def delete_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, opts = {})
      delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, opts)
      nil
    end

    # Delete fleet wing
    # Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param wing_id [Integer] The wing to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.delete_fleets_fleet_id_wings_wing_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.delete_fleets_fleet_id_wings_wing_id"
      end
      # verify the required parameter 'wing_id' is set
      if @api_client.config.client_side_validation && wing_id.nil?
        fail ArgumentError, "Missing the required parameter 'wing_id' when calling FleetsApi.delete_fleets_fleet_id_wings_wing_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/wings/{wing_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'wing_id' + '}', CGI.escape(wing_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.delete_fleets_fleet_id_wings_wing_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#delete_fleets_fleet_id_wings_wing_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get character fleet info
    # Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [GetCharactersCharacterIdFleetOk]
    def get_characters_character_id_fleet(character_id, opts = {})
      data, _status_code, _headers = get_characters_character_id_fleet_with_http_info(character_id, opts)
      data
    end

    # Get character fleet info
    # Return the fleet ID the character is in, if any.  --- Alternate route: &#x60;/legacy/characters/{character_id}/fleet/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/fleet/&#x60;  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(GetCharactersCharacterIdFleetOk, Integer, Hash)>] GetCharactersCharacterIdFleetOk data, response status code and response headers
    def get_characters_character_id_fleet_with_http_info(character_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.get_characters_character_id_fleet ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling FleetsApi.get_characters_character_id_fleet"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling FleetsApi.get_characters_character_id_fleet, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/characters/{character_id}/fleet/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCharactersCharacterIdFleetOk'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.get_characters_character_id_fleet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_characters_character_id_fleet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fleet information
    # Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [GetFleetsFleetIdOk]
    def get_fleets_fleet_id(fleet_id, opts = {})
      data, _status_code, _headers = get_fleets_fleet_id_with_http_info(fleet_id, opts)
      data
    end

    # Get fleet information
    # Return details about a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  --- This route is cached for up to 5 seconds
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(GetFleetsFleetIdOk, Integer, Hash)>] GetFleetsFleetIdOk data, response status code and response headers
    def get_fleets_fleet_id_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.get_fleets_fleet_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.get_fleets_fleet_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFleetsFleetIdOk'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.get_fleets_fleet_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_fleets_fleet_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fleet members
    # Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Language to use in the response (default to 'en')
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :language Language to use in the response, takes precedence over Accept-Language (default to 'en')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetFleetsFleetIdMembers200Ok>]
    def get_fleets_fleet_id_members(fleet_id, opts = {})
      data, _status_code, _headers = get_fleets_fleet_id_members_with_http_info(fleet_id, opts)
      data
    end

    # Get fleet members
    # Return information about fleet members  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  --- This route is cached for up to 5 seconds
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Language to use in the response (default to 'en')
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :language Language to use in the response, takes precedence over Accept-Language (default to 'en')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetFleetsFleetIdMembers200Ok>, Integer, Hash)>] Array<GetFleetsFleetIdMembers200Ok> data, response status code and response headers
    def get_fleets_fleet_id_members_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.get_fleets_fleet_id_members ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.get_fleets_fleet_id_members"
      end
      allowable_values = ["en", "en-us", "de", "fr", "ja", "ru", "zh", "ko", "es"]
      if @api_client.config.client_side_validation && opts[:'accept_language'] && !allowable_values.include?(opts[:'accept_language'])
        fail ArgumentError, "invalid value for \"accept_language\", must be one of #{allowable_values}"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      allowable_values = ["en", "en-us", "de", "fr", "ja", "ru", "zh", "ko", "es"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/members/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetFleetsFleetIdMembers200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.get_fleets_fleet_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_fleets_fleet_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fleet wings
    # Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Language to use in the response (default to 'en')
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :language Language to use in the response, takes precedence over Accept-Language (default to 'en')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetFleetsFleetIdWings200Ok>]
    def get_fleets_fleet_id_wings(fleet_id, opts = {})
      data, _status_code, _headers = get_fleets_fleet_id_wings_with_http_info(fleet_id, opts)
      data
    end

    # Get fleet wings
    # Return information about wings in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  --- This route is cached for up to 5 seconds
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept_language Language to use in the response (default to 'en')
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :language Language to use in the response, takes precedence over Accept-Language (default to 'en')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetFleetsFleetIdWings200Ok>, Integer, Hash)>] Array<GetFleetsFleetIdWings200Ok> data, response status code and response headers
    def get_fleets_fleet_id_wings_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.get_fleets_fleet_id_wings ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.get_fleets_fleet_id_wings"
      end
      allowable_values = ["en", "en-us", "de", "fr", "ja", "ru", "zh", "ko", "es"]
      if @api_client.config.client_side_validation && opts[:'accept_language'] && !allowable_values.include?(opts[:'accept_language'])
        fail ArgumentError, "invalid value for \"accept_language\", must be one of #{allowable_values}"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      allowable_values = ["en", "en-us", "de", "fr", "ja", "ru", "zh", "ko", "es"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/wings/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetFleetsFleetIdWings200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.get_fleets_fleet_id_wings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_fleets_fleet_id_wings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fleet invitation
    # Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param invitation [PostFleetsFleetIdMembersInvitation] Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def post_fleets_fleet_id_members(fleet_id, invitation, opts = {})
      post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, opts)
      nil
    end

    # Create fleet invitation
    # Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param invitation [PostFleetsFleetIdMembersInvitation] Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.post_fleets_fleet_id_members ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.post_fleets_fleet_id_members"
      end
      # verify the required parameter 'invitation' is set
      if @api_client.config.client_side_validation && invitation.nil?
        fail ArgumentError, "Missing the required parameter 'invitation' when calling FleetsApi.post_fleets_fleet_id_members"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/members/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(invitation)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.post_fleets_fleet_id_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#post_fleets_fleet_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fleet wing
    # Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [PostFleetsFleetIdWingsCreated]
    def post_fleets_fleet_id_wings(fleet_id, opts = {})
      data, _status_code, _headers = post_fleets_fleet_id_wings_with_http_info(fleet_id, opts)
      data
    end

    # Create fleet wing
    # Create a new wing in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(PostFleetsFleetIdWingsCreated, Integer, Hash)>] PostFleetsFleetIdWingsCreated data, response status code and response headers
    def post_fleets_fleet_id_wings_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.post_fleets_fleet_id_wings ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.post_fleets_fleet_id_wings"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/wings/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostFleetsFleetIdWingsCreated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.post_fleets_fleet_id_wings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#post_fleets_fleet_id_wings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fleet squad
    # Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param wing_id [Integer] The wing_id to create squad in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [PostFleetsFleetIdWingsWingIdSquadsCreated]
    def post_fleets_fleet_id_wings_wing_id_squads(fleet_id, wing_id, opts = {})
      data, _status_code, _headers = post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, opts)
      data
    end

    # Create fleet squad
    # Create a new squad in a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param wing_id [Integer] The wing_id to create squad in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(PostFleetsFleetIdWingsWingIdSquadsCreated, Integer, Hash)>] PostFleetsFleetIdWingsWingIdSquadsCreated data, response status code and response headers
    def post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.post_fleets_fleet_id_wings_wing_id_squads ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.post_fleets_fleet_id_wings_wing_id_squads"
      end
      # verify the required parameter 'wing_id' is set
      if @api_client.config.client_side_validation && wing_id.nil?
        fail ArgumentError, "Missing the required parameter 'wing_id' when calling FleetsApi.post_fleets_fleet_id_wings_wing_id_squads"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/wings/{wing_id}/squads/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'wing_id' + '}', CGI.escape(wing_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostFleetsFleetIdWingsWingIdSquadsCreated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.post_fleets_fleet_id_wings_wing_id_squads",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#post_fleets_fleet_id_wings_wing_id_squads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update fleet
    # Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param new_settings [PutFleetsFleetIdNewSettings] What to update for this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def put_fleets_fleet_id(fleet_id, new_settings, opts = {})
      put_fleets_fleet_id_with_http_info(fleet_id, new_settings, opts)
      nil
    end

    # Update fleet
    # Update settings about a fleet  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param new_settings [PutFleetsFleetIdNewSettings] What to update for this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_with_http_info(fleet_id, new_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.put_fleets_fleet_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id"
      end
      # verify the required parameter 'new_settings' is set
      if @api_client.config.client_side_validation && new_settings.nil?
        fail ArgumentError, "Missing the required parameter 'new_settings' when calling FleetsApi.put_fleets_fleet_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_settings)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.put_fleets_fleet_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move fleet member
    # Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param member_id [Integer] The character ID of a member in this fleet
    # @param movement [PutFleetsFleetIdMembersMemberIdMovement] Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def put_fleets_fleet_id_members_member_id(fleet_id, member_id, movement, opts = {})
      put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, opts)
      nil
    end

    # Move fleet member
    # Move a fleet member around  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param member_id [Integer] The character ID of a member in this fleet
    # @param movement [PutFleetsFleetIdMembersMemberIdMovement] Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.put_fleets_fleet_id_members_member_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id_members_member_id"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling FleetsApi.put_fleets_fleet_id_members_member_id"
      end
      # verify the required parameter 'movement' is set
      if @api_client.config.client_side_validation && movement.nil?
        fail ArgumentError, "Missing the required parameter 'movement' when calling FleetsApi.put_fleets_fleet_id_members_member_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/members/{member_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'member_id' + '}', CGI.escape(member_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(movement)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.put_fleets_fleet_id_members_member_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id_members_member_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename fleet squad
    # Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param squad_id [Integer] The squad to rename
    # @param naming [PutFleetsFleetIdSquadsSquadIdNaming] New name of the squad
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def put_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, naming, opts = {})
      put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, naming, opts)
      nil
    end

    # Rename fleet squad
    # Rename a fleet squad  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param squad_id [Integer] The squad to rename
    # @param naming [PutFleetsFleetIdSquadsSquadIdNaming] New name of the squad
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, naming, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.put_fleets_fleet_id_squads_squad_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id_squads_squad_id"
      end
      # verify the required parameter 'squad_id' is set
      if @api_client.config.client_side_validation && squad_id.nil?
        fail ArgumentError, "Missing the required parameter 'squad_id' when calling FleetsApi.put_fleets_fleet_id_squads_squad_id"
      end
      # verify the required parameter 'naming' is set
      if @api_client.config.client_side_validation && naming.nil?
        fail ArgumentError, "Missing the required parameter 'naming' when calling FleetsApi.put_fleets_fleet_id_squads_squad_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/squads/{squad_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'squad_id' + '}', CGI.escape(squad_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(naming)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.put_fleets_fleet_id_squads_squad_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id_squads_squad_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename fleet wing
    # Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 
    # @param fleet_id [Integer] ID for a fleet
    # @param wing_id [Integer] The wing to rename
    # @param naming [PutFleetsFleetIdWingsWingIdNaming] New name of the wing
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def put_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, naming, opts = {})
      put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, naming, opts)
      nil
    end

    # Rename fleet wing
    # Rename a fleet wing  --- Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
    # @param fleet_id [Integer] ID for a fleet
    # @param wing_id [Integer] The wing to rename
    # @param naming [PutFleetsFleetIdWingsWingIdNaming] New name of the wing
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, naming, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetsApi.put_fleets_fleet_id_wings_wing_id ...'
      end
      # verify the required parameter 'fleet_id' is set
      if @api_client.config.client_side_validation && fleet_id.nil?
        fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id_wings_wing_id"
      end
      # verify the required parameter 'wing_id' is set
      if @api_client.config.client_side_validation && wing_id.nil?
        fail ArgumentError, "Missing the required parameter 'wing_id' when calling FleetsApi.put_fleets_fleet_id_wings_wing_id"
      end
      # verify the required parameter 'naming' is set
      if @api_client.config.client_side_validation && naming.nil?
        fail ArgumentError, "Missing the required parameter 'naming' when calling FleetsApi.put_fleets_fleet_id_wings_wing_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fleets/{fleet_id}/wings/{wing_id}/'.sub('{' + 'fleet_id' + '}', CGI.escape(fleet_id.to_s)).sub('{' + 'wing_id' + '}', CGI.escape(wing_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(naming)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"FleetsApi.put_fleets_fleet_id_wings_wing_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id_wings_wing_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
