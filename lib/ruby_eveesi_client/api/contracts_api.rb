=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module RubyEveesiClient
  class ContractsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get contracts
    # Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/characters/{character_id}/contracts/`  Alternate route: `/legacy/characters/{character_id}/contracts/`  Alternate route: `/v1/characters/{character_id}/contracts/`  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCharactersCharacterIdContracts200Ok>]
    def get_characters_character_id_contracts(character_id, opts = {})
      data, _status_code, _headers = get_characters_character_id_contracts_with_http_info(character_id, opts)
      data
    end

    # Get contracts
    # Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/&#x60;  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCharactersCharacterIdContracts200Ok>, Integer, Hash)>] Array<GetCharactersCharacterIdContracts200Ok> data, response status code and response headers
    def get_characters_character_id_contracts_with_http_info(character_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_characters_character_id_contracts ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContractsApi.get_characters_character_id_contracts"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContractsApi.get_characters_character_id_contracts, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContractsApi.get_characters_character_id_contracts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/characters/{character_id}/contracts/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCharactersCharacterIdContracts200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_characters_character_id_contracts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_characters_character_id_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract bids
    # Lists bids on a particular auction contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCharactersCharacterIdContractsContractIdBids200Ok>]
    def get_characters_character_id_contracts_contract_id_bids(character_id, contract_id, opts = {})
      data, _status_code, _headers = get_characters_character_id_contracts_contract_id_bids_with_http_info(character_id, contract_id, opts)
      data
    end

    # Get contract bids
    # Lists bids on a particular auction contract  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/{contract_id}/bids/&#x60;  --- This route is cached for up to 300 seconds
    # @param character_id [Integer] An EVE character ID
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCharactersCharacterIdContractsContractIdBids200Ok>, Integer, Hash)>] Array<GetCharactersCharacterIdContractsContractIdBids200Ok> data, response status code and response headers
    def get_characters_character_id_contracts_contract_id_bids_with_http_info(character_id, contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_characters_character_id_contracts_contract_id_bids ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContractsApi.get_characters_character_id_contracts_contract_id_bids"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContractsApi.get_characters_character_id_contracts_contract_id_bids, must be greater than or equal to 1.'
      end

      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling ContractsApi.get_characters_character_id_contracts_contract_id_bids"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/characters/{character_id}/contracts/{contract_id}/bids/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s)).sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCharactersCharacterIdContractsContractIdBids200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_characters_character_id_contracts_contract_id_bids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_characters_character_id_contracts_contract_id_bids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract items
    # Lists items of a particular contract  --- Alternate route: `/dev/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/characters/{character_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/characters/{character_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
    # @param character_id [Integer] An EVE character ID
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCharactersCharacterIdContractsContractIdItems200Ok>]
    def get_characters_character_id_contracts_contract_id_items(character_id, contract_id, opts = {})
      data, _status_code, _headers = get_characters_character_id_contracts_contract_id_items_with_http_info(character_id, contract_id, opts)
      data
    end

    # Get contract items
    # Lists items of a particular contract  --- Alternate route: &#x60;/dev/characters/{character_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/v1/characters/{character_id}/contracts/{contract_id}/items/&#x60;  --- This route is cached for up to 3600 seconds
    # @param character_id [Integer] An EVE character ID
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCharactersCharacterIdContractsContractIdItems200Ok>, Integer, Hash)>] Array<GetCharactersCharacterIdContractsContractIdItems200Ok> data, response status code and response headers
    def get_characters_character_id_contracts_contract_id_items_with_http_info(character_id, contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_characters_character_id_contracts_contract_id_items ...'
      end
      # verify the required parameter 'character_id' is set
      if @api_client.config.client_side_validation && character_id.nil?
        fail ArgumentError, "Missing the required parameter 'character_id' when calling ContractsApi.get_characters_character_id_contracts_contract_id_items"
      end
      if @api_client.config.client_side_validation && character_id < 1
        fail ArgumentError, 'invalid value for "character_id" when calling ContractsApi.get_characters_character_id_contracts_contract_id_items, must be greater than or equal to 1.'
      end

      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling ContractsApi.get_characters_character_id_contracts_contract_id_items"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/characters/{character_id}/contracts/{contract_id}/items/'.sub('{' + 'character_id' + '}', CGI.escape(character_id.to_s)).sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCharactersCharacterIdContractsContractIdItems200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_characters_character_id_contracts_contract_id_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_characters_character_id_contracts_contract_id_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get public contract bids
    # Lists bids on a public auction contract  --- Alternate route: `/dev/contracts/public/bids/{contract_id}/`  Alternate route: `/legacy/contracts/public/bids/{contract_id}/`  Alternate route: `/v1/contracts/public/bids/{contract_id}/`  --- This route is cached for up to 300 seconds
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @return [Array<GetContractsPublicBidsContractId200Ok>]
    def get_contracts_public_bids_contract_id(contract_id, opts = {})
      data, _status_code, _headers = get_contracts_public_bids_contract_id_with_http_info(contract_id, opts)
      data
    end

    # Get public contract bids
    # Lists bids on a public auction contract  --- Alternate route: &#x60;/dev/contracts/public/bids/{contract_id}/&#x60;  Alternate route: &#x60;/legacy/contracts/public/bids/{contract_id}/&#x60;  Alternate route: &#x60;/v1/contracts/public/bids/{contract_id}/&#x60;  --- This route is cached for up to 300 seconds
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @return [Array<(Array<GetContractsPublicBidsContractId200Ok>, Integer, Hash)>] Array<GetContractsPublicBidsContractId200Ok> data, response status code and response headers
    def get_contracts_public_bids_contract_id_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_contracts_public_bids_contract_id ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling ContractsApi.get_contracts_public_bids_contract_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContractsApi.get_contracts_public_bids_contract_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/contracts/public/bids/{contract_id}/'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetContractsPublicBidsContractId200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ContractsApi.get_contracts_public_bids_contract_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contracts_public_bids_contract_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get public contract items
    # Lists items of a public contract  --- Alternate route: `/dev/contracts/public/items/{contract_id}/`  Alternate route: `/legacy/contracts/public/items/{contract_id}/`  Alternate route: `/v1/contracts/public/items/{contract_id}/`  --- This route is cached for up to 3600 seconds
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @return [Array<GetContractsPublicItemsContractId200Ok>]
    def get_contracts_public_items_contract_id(contract_id, opts = {})
      data, _status_code, _headers = get_contracts_public_items_contract_id_with_http_info(contract_id, opts)
      data
    end

    # Get public contract items
    # Lists items of a public contract  --- Alternate route: &#x60;/dev/contracts/public/items/{contract_id}/&#x60;  Alternate route: &#x60;/legacy/contracts/public/items/{contract_id}/&#x60;  Alternate route: &#x60;/v1/contracts/public/items/{contract_id}/&#x60;  --- This route is cached for up to 3600 seconds
    # @param contract_id [Integer] ID of a contract
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @return [Array<(Array<GetContractsPublicItemsContractId200Ok>, Integer, Hash)>] Array<GetContractsPublicItemsContractId200Ok> data, response status code and response headers
    def get_contracts_public_items_contract_id_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_contracts_public_items_contract_id ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling ContractsApi.get_contracts_public_items_contract_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContractsApi.get_contracts_public_items_contract_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/contracts/public/items/{contract_id}/'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetContractsPublicItemsContractId200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ContractsApi.get_contracts_public_items_contract_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contracts_public_items_contract_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get public contracts
    # Returns a paginated list of all public contracts in the given region  --- Alternate route: `/dev/contracts/public/{region_id}/`  Alternate route: `/legacy/contracts/public/{region_id}/`  Alternate route: `/v1/contracts/public/{region_id}/`  --- This route is cached for up to 1800 seconds
    # @param region_id [Integer] An EVE region id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @return [Array<GetContractsPublicRegionId200Ok>]
    def get_contracts_public_region_id(region_id, opts = {})
      data, _status_code, _headers = get_contracts_public_region_id_with_http_info(region_id, opts)
      data
    end

    # Get public contracts
    # Returns a paginated list of all public contracts in the given region  --- Alternate route: &#x60;/dev/contracts/public/{region_id}/&#x60;  Alternate route: &#x60;/legacy/contracts/public/{region_id}/&#x60;  Alternate route: &#x60;/v1/contracts/public/{region_id}/&#x60;  --- This route is cached for up to 1800 seconds
    # @param region_id [Integer] An EVE region id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @return [Array<(Array<GetContractsPublicRegionId200Ok>, Integer, Hash)>] Array<GetContractsPublicRegionId200Ok> data, response status code and response headers
    def get_contracts_public_region_id_with_http_info(region_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_contracts_public_region_id ...'
      end
      # verify the required parameter 'region_id' is set
      if @api_client.config.client_side_validation && region_id.nil?
        fail ArgumentError, "Missing the required parameter 'region_id' when calling ContractsApi.get_contracts_public_region_id"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContractsApi.get_contracts_public_region_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/contracts/public/{region_id}/'.sub('{' + 'region_id' + '}', CGI.escape(region_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetContractsPublicRegionId200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ContractsApi.get_contracts_public_region_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_contracts_public_region_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get corporation contracts
    # Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \"in_progress\".  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/`  --- This route is cached for up to 300 seconds
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCorporationsCorporationIdContracts200Ok>]
    def get_corporations_corporation_id_contracts(corporation_id, opts = {})
      data, _status_code, _headers = get_corporations_corporation_id_contracts_with_http_info(corporation_id, opts)
      data
    end

    # Get corporation contracts
    # Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/&#x60;  --- This route is cached for up to 300 seconds
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCorporationsCorporationIdContracts200Ok>, Integer, Hash)>] Array<GetCorporationsCorporationIdContracts200Ok> data, response status code and response headers
    def get_corporations_corporation_id_contracts_with_http_info(corporation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_corporations_corporation_id_contracts ...'
      end
      # verify the required parameter 'corporation_id' is set
      if @api_client.config.client_side_validation && corporation_id.nil?
        fail ArgumentError, "Missing the required parameter 'corporation_id' when calling ContractsApi.get_corporations_corporation_id_contracts"
      end
      if @api_client.config.client_side_validation && corporation_id < 1
        fail ArgumentError, 'invalid value for "corporation_id" when calling ContractsApi.get_corporations_corporation_id_contracts, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContractsApi.get_corporations_corporation_id_contracts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/corporations/{corporation_id}/contracts/'.sub('{' + 'corporation_id' + '}', CGI.escape(corporation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCorporationsCorporationIdContracts200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_corporations_corporation_id_contracts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_corporations_corporation_id_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get corporation contract bids
    # Lists bids on a particular auction contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/`  --- This route is cached for up to 3600 seconds
    # @param contract_id [Integer] ID of a contract
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCorporationsCorporationIdContractsContractIdBids200Ok>]
    def get_corporations_corporation_id_contracts_contract_id_bids(contract_id, corporation_id, opts = {})
      data, _status_code, _headers = get_corporations_corporation_id_contracts_contract_id_bids_with_http_info(contract_id, corporation_id, opts)
      data
    end

    # Get corporation contract bids
    # Lists bids on a particular auction contract  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/{contract_id}/bids/&#x60;  --- This route is cached for up to 3600 seconds
    # @param contract_id [Integer] ID of a contract
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [Integer] :page Which page of results to return (default to 1)
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCorporationsCorporationIdContractsContractIdBids200Ok>, Integer, Hash)>] Array<GetCorporationsCorporationIdContractsContractIdBids200Ok> data, response status code and response headers
    def get_corporations_corporation_id_contracts_contract_id_bids_with_http_info(contract_id, corporation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_corporations_corporation_id_contracts_contract_id_bids ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_bids"
      end
      # verify the required parameter 'corporation_id' is set
      if @api_client.config.client_side_validation && corporation_id.nil?
        fail ArgumentError, "Missing the required parameter 'corporation_id' when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_bids"
      end
      if @api_client.config.client_side_validation && corporation_id < 1
        fail ArgumentError, 'invalid value for "corporation_id" when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_bids, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_bids, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/corporations/{corporation_id}/contracts/{contract_id}/bids/'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'corporation_id' + '}', CGI.escape(corporation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCorporationsCorporationIdContractsContractIdBids200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_corporations_corporation_id_contracts_contract_id_bids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_corporations_corporation_id_contracts_contract_id_bids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get corporation contract items
    # Lists items of a particular contract  --- Alternate route: `/dev/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/`  Alternate route: `/v1/corporations/{corporation_id}/contracts/{contract_id}/items/`  --- This route is cached for up to 3600 seconds
    # @param contract_id [Integer] ID of a contract
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<GetCorporationsCorporationIdContractsContractIdItems200Ok>]
    def get_corporations_corporation_id_contracts_contract_id_items(contract_id, corporation_id, opts = {})
      data, _status_code, _headers = get_corporations_corporation_id_contracts_contract_id_items_with_http_info(contract_id, corporation_id, opts)
      data
    end

    # Get corporation contract items
    # Lists items of a particular contract  --- Alternate route: &#x60;/dev/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  Alternate route: &#x60;/v1/corporations/{corporation_id}/contracts/{contract_id}/items/&#x60;  --- This route is cached for up to 3600 seconds
    # @param contract_id [Integer] ID of a contract
    # @param corporation_id [Integer] An EVE corporation ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(Array<GetCorporationsCorporationIdContractsContractIdItems200Ok>, Integer, Hash)>] Array<GetCorporationsCorporationIdContractsContractIdItems200Ok> data, response status code and response headers
    def get_corporations_corporation_id_contracts_contract_id_items_with_http_info(contract_id, corporation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContractsApi.get_corporations_corporation_id_contracts_contract_id_items ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_items"
      end
      # verify the required parameter 'corporation_id' is set
      if @api_client.config.client_side_validation && corporation_id.nil?
        fail ArgumentError, "Missing the required parameter 'corporation_id' when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_items"
      end
      if @api_client.config.client_side_validation && corporation_id < 1
        fail ArgumentError, 'invalid value for "corporation_id" when calling ContractsApi.get_corporations_corporation_id_contracts_contract_id_items, must be greater than or equal to 1.'
      end

      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/corporations/{corporation_id}/contracts/{contract_id}/items/'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'corporation_id' + '}', CGI.escape(corporation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCorporationsCorporationIdContractsContractIdItems200Ok>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"ContractsApi.get_corporations_corporation_id_contracts_contract_id_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContractsApi#get_corporations_corporation_id_contracts_contract_id_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
