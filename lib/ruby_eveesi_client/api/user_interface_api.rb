=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

The version of the OpenAPI document: 1.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module RubyEveesiClient
  class UserInterfaceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Set Autopilot Waypoint
    # Set a solar system as autopilot waypoint  --- Alternate route: `/dev/ui/autopilot/waypoint/`  Alternate route: `/legacy/ui/autopilot/waypoint/`  Alternate route: `/v2/ui/autopilot/waypoint/` 
    # @param add_to_beginning [Boolean] Whether this solar system should be added to the beginning of all waypoints
    # @param clear_other_waypoints [Boolean] Whether clean other waypoints beforing adding this one
    # @param destination_id [Integer] The destination to travel to, can be solar system, station or structure&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def post_ui_autopilot_waypoint(add_to_beginning, clear_other_waypoints, destination_id, opts = {})
      post_ui_autopilot_waypoint_with_http_info(add_to_beginning, clear_other_waypoints, destination_id, opts)
      nil
    end

    # Set Autopilot Waypoint
    # Set a solar system as autopilot waypoint  --- Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/legacy/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60; 
    # @param add_to_beginning [Boolean] Whether this solar system should be added to the beginning of all waypoints
    # @param clear_other_waypoints [Boolean] Whether clean other waypoints beforing adding this one
    # @param destination_id [Integer] The destination to travel to, can be solar system, station or structure&#39;s id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_ui_autopilot_waypoint_with_http_info(add_to_beginning, clear_other_waypoints, destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInterfaceApi.post_ui_autopilot_waypoint ...'
      end
      # verify the required parameter 'add_to_beginning' is set
      if @api_client.config.client_side_validation && add_to_beginning.nil?
        fail ArgumentError, "Missing the required parameter 'add_to_beginning' when calling UserInterfaceApi.post_ui_autopilot_waypoint"
      end
      # verify the required parameter 'clear_other_waypoints' is set
      if @api_client.config.client_side_validation && clear_other_waypoints.nil?
        fail ArgumentError, "Missing the required parameter 'clear_other_waypoints' when calling UserInterfaceApi.post_ui_autopilot_waypoint"
      end
      # verify the required parameter 'destination_id' is set
      if @api_client.config.client_side_validation && destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'destination_id' when calling UserInterfaceApi.post_ui_autopilot_waypoint"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ui/autopilot/waypoint/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'add_to_beginning'] = add_to_beginning
      query_params[:'clear_other_waypoints'] = clear_other_waypoints
      query_params[:'destination_id'] = destination_id
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"UserInterfaceApi.post_ui_autopilot_waypoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInterfaceApi#post_ui_autopilot_waypoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open Contract Window
    # Open the contract window inside the client  --- Alternate route: `/dev/ui/openwindow/contract/`  Alternate route: `/legacy/ui/openwindow/contract/`  Alternate route: `/v1/ui/openwindow/contract/` 
    # @param contract_id [Integer] The contract to open
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def post_ui_openwindow_contract(contract_id, opts = {})
      post_ui_openwindow_contract_with_http_info(contract_id, opts)
      nil
    end

    # Open Contract Window
    # Open the contract window inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60; 
    # @param contract_id [Integer] The contract to open
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_ui_openwindow_contract_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInterfaceApi.post_ui_openwindow_contract ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling UserInterfaceApi.post_ui_openwindow_contract"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ui/openwindow/contract/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'contract_id'] = contract_id
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"UserInterfaceApi.post_ui_openwindow_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInterfaceApi#post_ui_openwindow_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open Information Window
    # Open the information window for a character, corporation or alliance inside the client  --- Alternate route: `/dev/ui/openwindow/information/`  Alternate route: `/legacy/ui/openwindow/information/`  Alternate route: `/v1/ui/openwindow/information/` 
    # @param target_id [Integer] The target to open
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def post_ui_openwindow_information(target_id, opts = {})
      post_ui_openwindow_information_with_http_info(target_id, opts)
      nil
    end

    # Open Information Window
    # Open the information window for a character, corporation or alliance inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60; 
    # @param target_id [Integer] The target to open
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_ui_openwindow_information_with_http_info(target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInterfaceApi.post_ui_openwindow_information ...'
      end
      # verify the required parameter 'target_id' is set
      if @api_client.config.client_side_validation && target_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_id' when calling UserInterfaceApi.post_ui_openwindow_information"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ui/openwindow/information/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'target_id'] = target_id
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"UserInterfaceApi.post_ui_openwindow_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInterfaceApi#post_ui_openwindow_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open Market Details
    # Open the market details window for a specific typeID inside the client  --- Alternate route: `/dev/ui/openwindow/marketdetails/`  Alternate route: `/legacy/ui/openwindow/marketdetails/`  Alternate route: `/v1/ui/openwindow/marketdetails/` 
    # @param type_id [Integer] The item type to open in market window
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def post_ui_openwindow_marketdetails(type_id, opts = {})
      post_ui_openwindow_marketdetails_with_http_info(type_id, opts)
      nil
    end

    # Open Market Details
    # Open the market details window for a specific typeID inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60; 
    # @param type_id [Integer] The item type to open in market window
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_ui_openwindow_marketdetails_with_http_info(type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInterfaceApi.post_ui_openwindow_marketdetails ...'
      end
      # verify the required parameter 'type_id' is set
      if @api_client.config.client_side_validation && type_id.nil?
        fail ArgumentError, "Missing the required parameter 'type_id' when calling UserInterfaceApi.post_ui_openwindow_marketdetails"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ui/openwindow/marketdetails/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_id'] = type_id
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"UserInterfaceApi.post_ui_openwindow_marketdetails",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInterfaceApi#post_ui_openwindow_marketdetails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open New Mail Window
    # Open the New Mail window, according to settings from the request if applicable  --- Alternate route: `/dev/ui/openwindow/newmail/`  Alternate route: `/legacy/ui/openwindow/newmail/`  Alternate route: `/v1/ui/openwindow/newmail/` 
    # @param new_mail [PostUiOpenwindowNewmailNewMail] The details of mail to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [nil]
    def post_ui_openwindow_newmail(new_mail, opts = {})
      post_ui_openwindow_newmail_with_http_info(new_mail, opts)
      nil
    end

    # Open New Mail Window
    # Open the New Mail window, according to settings from the request if applicable  --- Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60; 
    # @param new_mail [PostUiOpenwindowNewmailNewMail] The details of mail to create
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to 'tranquility')
    # @option opts [String] :token Access token to use if unable to set a header
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_ui_openwindow_newmail_with_http_info(new_mail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserInterfaceApi.post_ui_openwindow_newmail ...'
      end
      # verify the required parameter 'new_mail' is set
      if @api_client.config.client_side_validation && new_mail.nil?
        fail ArgumentError, "Missing the required parameter 'new_mail' when calling UserInterfaceApi.post_ui_openwindow_newmail"
      end
      allowable_values = ["tranquility"]
      if @api_client.config.client_side_validation && opts[:'datasource'] && !allowable_values.include?(opts[:'datasource'])
        fail ArgumentError, "invalid value for \"datasource\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ui/openwindow/newmail/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_mail)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['evesso']

      new_options = opts.merge(
        :operation => :"UserInterfaceApi.post_ui_openwindow_newmail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserInterfaceApi#post_ui_openwindow_newmail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
